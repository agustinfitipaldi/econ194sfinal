knitr::opts_chunk$set(echo = TRUE)
library(readr)
diamond <- read_csv("Diamonds Prices2022.csv")
library(readr)
library(dplyr)
library(ggplot2)
diamond <- read_csv("Diamonds Prices2022.csv")
diamond_sample <- diamond[sample(nrow(data), 2000), ]
View(data)
View(diamond)
rm(list = ls())
diamond_sample <- sample_n(diamond, 2000)
#download packages and data
library(readr)
library(dplyr)
library(ggplot2)
diamond <- read_csv("Diamonds Prices2022.csv")
diamond_sample <- sample_n(diamond, 2000)
View(diamond_sample)
summary(diamond_sample)
str(diamond_sample)
summary(diamond_sample)
# structure of the data
str(diamond_sample)
hist(diamond_sample)
hist(diamond_sample$carat)
hist(diamond_sample$carat)
hist(diamond_sample$depth)
hist(diamond_sample$table)
hist(diamond_sample$price)
hist(diamond_sample$table)
hist(diamond_sample$price)
hist(diamond_sample$carat,
main = "Sample Diamond Carat Distribution",
xlab = "Carat")
barpot(diamond_sample$cut)
barpot(table(diamond_sample$cut))
ggplot(diamond_sample, aes(x = cut)) +
geom_bar()
ggplot(diamond_sample, aes(x = color)) +
geom_bar() +
ggtitle("Diamond Color Distribution")
ggplot(diamond_sample, aes(x = clarity)) +
geom_bar() +
ggtitle("Diamond Clarity Distribution")
cor(diamond_sample)
View(diamond)
cor(diamond_sample[,-c(1, 3,4,5)])
# structure of the data
knitr::kable(str(diamond_sample))
# structure of the data
knitr::kable(str(diamond_sample))
# 2. Data summary
summary(diamond_sample)
diamond_sample$cut <- as.factor(diamond$cut)
diamond_sample$cut <- as.factor(diamond_sample$cut)
diamond_sample$color <- as.factor(diamond_sample$color)
diamond_sample$clarity <- as.factor(diamond_sample$clarity)
#correlation matrix
knitr::kable(cor(diamond_sample[,-c(1, 3,4,5)]))
cor(diamond_sample[,-c(1, 3,4,5)])
diamond_sample$cut <- as.factor(diamond_sample$cut)
diamond_sample$color <- as.factor(diamond_sample$color)
diamond_sample$clarity <- as.factor(diamond_sample$clarity)
#bar plots for categorical variables
ggplot(diamond_sample, aes(x = cut)) +
geom_bar() +
ggtitle("Diamond Cut Distribution")
ggplot(diamond_sample, aes(x = color)) +
geom_bar() +
ggtitle("Diamond Color Distribution")
ggplot(diamond_sample, aes(x = clarity)) +
geom_bar() +
ggtitle("Diamond Clarity Distribution")
full_model <- lm(price ~ carat + depth + table + x + y + z + cut + color + clarity,
data = diamond_sample)
summary(full_model)
#simple linear model with one regressor
simple_model <- lm(price ~ carat, data = diamond)
summary(simple_model)
confint(simple_model, level = .95)
predict(simple_model, newdata = diamond$carat,
level = .99,
interval = "prediction")
predict(simple_model, newdata = data.frame(carat = carat,
predict(simple_model, newdata = data.frame(carat = carat),
level = .99,
interval = "prediction")
predict(simple_model, newdata = data.frame(carat = carat),
level = .99,
interval = "prediction")
predict(simple_model, newdata = data.frame(carat = diamond$carat),
level = .99,
interval = "prediction")
predict(simple_model, newdata = data.frame(carat = mean(diamond$carat)),
level = .99,
interval = "prediction")
predict(simple_model,
newdata = data.frame(carat = mean(diamond$carat)),
level = .95,
interval = "prediction")
plot(diamond$price ~ diamond$carat)
abline(simple_model, col = "blue")
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point() +
geom_smooth(method = "lm", color = "blue")
plot(diamond$price ~ diamond$carat)
abline(simple_model, col = "blue")
plot(diamond$price ~ diamond$carat, pch = 20)
plot(diamond$price ~ diamond$carat, pch = 20, cex = 0.3)
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point() +
geom_smooth(method = "lm", color = "blue")
plot(diamond$price ~ diamond$carat, pch = 20, cex = 0.3)
abline(simple_model, col = "blue")
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
scale_y_continuous(limits = c(0, 20000))
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
#scale_y_continuous(limits = c(0, 20000))
plot(diamond$price ~ diamond$carat, pch = 20, cex = 0.3)
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
scale_y_continuous(limits = c(0, 25000))
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
scale_y_continuous(limits = c(0, 25000)) +
labs(title = "Diamond Price vs Diamond Carat",
x = "Carat",
y = "Price")
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
scale_y_continuous(limits = c(0, 20000)) +
labs(title = "Diamond Price vs Diamond Carat",
x = "Carat",
y = "Price")
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point(size = 1) +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
scale_y_continuous(limits = c(0, 20000)) +
labs(title = "Diamond Price vs Diamond Carat",
x = "Carat",
y = "Price")
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point(size = 0.1) +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
scale_y_continuous(limits = c(0, 20000)) +
labs(title = "Diamond Price vs Diamond Carat",
x = "Carat",
y = "Price")
ggplot(data = diamond,
aes(x =  carat, y = price)) +
geom_point(size = 0.3) +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
scale_y_continuous(limits = c(0, 20000)) +
labs(title = "Diamond Price vs Diamond Carat",
x = "Carat",
y = "Price")
#| include: false
library(tidyverse)
library(lubridate)
library(knitr)
library(kableExtra)
library(plotly)
# Read and prepare the data
bank_data <- read.csv("combined_fdic_data.csv") %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%Y")
)
# Read and prepare the data
bank_data <- read.csv("combined_fdic_data.csv") %>%
mutate(
Date = as.Date(Date, format = "%m/%d/%Y")
)
library(readr)
read_csv("FDIC_data.csv")
setwd("~/GitHub/econ194sfinal")
read_csv("FDIC_data.csv")
data <- read_csv("FDIC_data.csv")
View(data)
data <- read_csv("combined_fdic_data.csv")
View(data)
knitr::opts_chunk$set(echo = TRUE)
#drops unnecessary columns from downloading data
#survey_data <- survey_data[,c(18,19,20,21,22)]
#Data manipulation to get into rectangular format
survey <- survey_data %>%
pivot_longer(
cols = c("Q1C_1", "Q2L_1", "Q3I_1"),
names_to = "question",
values_to = "response",
values_drop_na = TRUE    #drops null responses
) %>%
slice(-(1:6)) %>%
rename(              #renames columns
polV = "Q4",
class = "Q5"
) %>%
filter(!is.na(polV), polV != "Other", class != "Other") %>%
mutate(response = as.numeric(response))
#load packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
#read in data
survey_data <- read_csv("5-28_Survey.csv")
survey_data <- survey_data[,c(18,19,20,21,22)]
survey <- survey_data %>%
pivot_longer(
cols = c("Q1C_1", "Q2L_1", "Q3I_1"),
names_to = "question",
values_to = "response",
values_drop_na = TRUE    #drops null responses
) %>%
slice(-(1:6)) %>%
rename(              #renames columns
polV = "Q4",
class = "Q5"
) %>%             #keep only resopnses from Liberal
filter(!is.na(polV), polV != "Other", class != "Other") %>%
mutate(response = as.numeric(response),
question = as.factor(question),
class = as.factor(class),
polV = as.factor(polV))
model1 <- aov(response ~ question + class + polV, data = survey)
summary(model1)
model2 <- lm(response ~ question + polV + class, data = survey)
summary(model2)
#drops unnecessary columns from downloading data
#survey_data <- survey_data[,c(18,19,20,21,22)]
#Data manipulation to get into rectangular format
survey <- survey_data %>%
pivot_longer(
cols = c("Q1C_1", "Q2L_1", "Q3I_1"),
names_to = "question",
values_to = "response",
values_drop_na = TRUE    #drops null responses
) %>%
slice(-(1:6)) %>%
rename(              #renames columns
polV = "Q4",
class = "Q5"
) %>%
filter(!is.na(polV), polV != "Other", class != "Other") %>%
mutate(response = as.numeric(response))
ggplot(data = survey, aes(y=response, x=question, fill = polV)) +
geom_boxplot()
#find variance and means for each group
q1 <- survey %>%
group_by(question) %>%
summarize(var = var(response), #within mean variance
mean = mean(response))
#between mean variance
var(q1$mean)
q1
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
#function takes variance as inputs and produces data frame with sample size values to graph in chart from lecture
sample_size_df_func <- function(mid, low, high){
#Rough estimates for mean agreement with question for conservatives, liberals, and independents respectively
groupmeans <- c(6, 8.75, 7.5)
#estimate of possible fluctuations between means estimated above
between.var <- seq(2, 10, by = 0.5)
samplemid = c()
samplelow = c()
samplehigh = c()
#loop through all values of possible between var mean variance
for (var_i in between.var){
output1 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = mid,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplemid = c(samplemid, output1$n)
output2 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = low,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplelow = c(samplelow, output2$n)
output3 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = high,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplehigh = c(samplehigh, output3$n)
}
sample_size_df = data.frame(
n = c(samplemid, samplelow, samplehigh),
between_var = rep(between.var, 3),
within_var = c(rep(mid, length(samplemid)),
rep(low, length(samplelow)),
rep(high, length(samplehigh)))
)
sample_size_df$within_var <-
factor(sample_size_df$within_var,
levels= c(mid, low, high))
sample_size_df
}
sample_size_df <- sample_size_df_func(50, 15, 150)
ggplot(data = sample_size_df,
mapping = aes(x = between_var, y = n,
group = within_var,
color = within_var)) +
geom_point() + geom_line() +
labs(
title = "Possible Sample Sizes",
subtitle = "(For 80% power and 5% confidence level)",
y = "Required Sample Size (n)",
x = "Between Mean Variance Estimates",
color = "Within Means Variation"
)
#load packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
#read in data
survey_data <- read_csv("5-28_Survey.csv")
survey_data <- survey_data[,c(18,19,20,21,22)]
survey <- survey_data %>%
pivot_longer(
cols = c("Q1C_1", "Q2L_1", "Q3I_1"),
names_to = "question",
values_to = "response",
values_drop_na = TRUE    #drops null responses
) %>%
slice(-(1:6)) %>%
rename(              #renames columns
polV = "Q4",
class = "Q5"
) %>%             #keep only resopnses from Liberal
filter(!is.na(polV), polV != "Other", class != "Other") %>%
mutate(response = as.numeric(response),
question = as.factor(question),
class = as.factor(class),
polV = as.factor(polV))
model1 <- aov(response ~ question + class + polV, data = survey)
summary(model1)
model2 <- lm(response ~ question + polV + class, data = survey)
summary(model2)
#drops unnecessary columns from downloading data
#survey_data <- survey_data[,c(18,19,20,21,22)]
#Data manipulation to get into rectangular format
survey <- survey_data %>%
pivot_longer(
cols = c("Q1C_1", "Q2L_1", "Q3I_1"),
names_to = "question",
values_to = "response",
values_drop_na = TRUE    #drops null responses
) %>%
slice(-(1:6)) %>%
rename(              #renames columns
polV = "Q4",
class = "Q5"
) %>%
filter(!is.na(polV), polV != "Other", class != "Other") %>%
mutate(response = as.numeric(response))
ggplot(data = survey, aes(y=response, x=question, fill = polV)) +
geom_boxplot()
#find variance and means for each group
q1 <- survey %>%
group_by(question) %>%
summarize(var = var(response), #within mean variance
mean = mean(response))
#between mean variance
var(q1$mean)
q1
#function takes variance as inputs and produces data frame with sample size values to graph in chart from lecture
sample_size_df_func <- function(mid, low, high){
#Rough estimates for mean agreement with question for conservatives, liberals, and independents respectively
groupmeans <- c(6, 8.75, 7.5)
#estimate of possible fluctuations between means estimated above
between.var <- seq(2, 10, by = 0.5)
samplemid = c()
samplelow = c()
samplehigh = c()
#loop through all values of possible between var mean variance
for (var_i in between.var){
output1 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = mid,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplemid = c(samplemid, output1$n)
output2 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = low,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplelow = c(samplelow, output2$n)
output3 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = high,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplehigh = c(samplehigh, output3$n)
}
sample_size_df = data.frame(
n = c(samplemid, samplelow, samplehigh),
between_var = rep(between.var, 3),
within_var = c(rep(mid, length(samplemid)),
rep(low, length(samplelow)),
rep(high, length(samplehigh)))
)
sample_size_df$within_var <-
factor(sample_size_df$within_var,
levels= c(mid, low, high))
sample_size_df
}
sample_size_df <- sample_size_df_func(50, 15, 150)
ggplot(data = sample_size_df,
mapping = aes(x = between_var, y = n,
group = within_var,
color = within_var)) +
geom_point() + geom_line() +
labs(
title = "Possible Sample Sizes",
subtitle = "(For 80% power and 5% confidence level)",
y = "Required Sample Size (n)",
x = "Between Mean Variance Estimates",
color = "Within Means Variation"
)
#function takes variance as inputs and produces data frame with sample size values to graph in chart from lecture
sample_size_df_func <- function(mid, low, high){
#Rough estimates for mean agreement with question for conservatives, liberals, and independents respectively
groupmeans <- c(4.62, 6.03, 6.4)
#estimate of possible fluctuations between means estimated above
between.var <- seq(0.5, 1.5, by = 0.1)
samplemid = c()
samplelow = c()
samplehigh = c()
#loop through all values of possible between var mean variance
for (var_i in between.var){
output1 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = mid,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplemid = c(samplemid, output1$n)
output2 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = low,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplelow = c(samplelow, output2$n)
output3 <-  power.anova.test(
groups = length(groupmeans),
between.var = var_i,
within.var = high,
power = 0.8, sig.level = 0.05,
n = NULL
)
samplehigh = c(samplehigh, output3$n)
}
sample_size_df = data.frame(
n = c(samplemid, samplelow, samplehigh),
between_var = rep(between.var, 3),
within_var = c(rep(mid, length(samplemid)),
rep(low, length(samplelow)),
rep(high, length(samplehigh)))
)
sample_size_df$within_var <-
factor(sample_size_df$within_var,
levels= c(mid, low, high))
sample_size_df
}
sample_size_df <- sample_size_df_func(6, 15, 8)
ggplot(data = sample_size_df,
mapping = aes(x = between_var, y = n,
group = within_var,
color = within_var)) +
geom_point() + geom_line() +
labs(
title = "Possible Sample Sizes",
subtitle = "(For 80% power and 5% confidence level)",
y = "Required Sample Size (n)",
x = "Between Mean Variance Estimates",
color = "Within Means Variation"
)
